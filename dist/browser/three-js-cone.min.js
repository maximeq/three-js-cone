!(function(t, s) {
"object" == typeof exports && "undefined" != typeof module
? s(exports)
: "function" == typeof define && define.amd
? define(["exports"], s)
: s((t.THREECone = {}));
})(this, function(t) {
"use strict";
const s = require("three-full/builds/Three.cjs.js");
s.Box3, s.Vector3;
function i(t, i, e, o, n) {
(this.v = t || new s.Vector3()),
(this.axis = i || new s.Vector3(1, 0, 0)),
(this.theta = e),
(this.inf = o || 0),
(this.sup = n || 1 / 0),
(this.cosTheta = Math.cos(e));
}
var e;
Object.assign(i.prototype, {
set: function(t, s, i, e, o) {
return (
this.v.copy(t),
this.axis.copy(s),
(this.theta = i),
(this.inf = e || 0),
(this.sup = o || 1 / 0),
(this.cosTheta = Math.cos(i)),
this
);
},
clone: function() {
return new this.constructor().copy(this);
},
copy: function(t) {
return (
this.v.copy(t.v),
this.axis.copy(t.axis),
(this.theta = t.theta),
(this.inf = t.inf),
(this.sup = t.sup),
(this.cosTheta = Math.cos(this.theta)),
this
);
},
empty: function() {
return this.theta <= 0 || this.inf >= this.sup;
},
getBoundingBox: function(t) {
throw "not implemented yet, todo";
},
equals: function(t) {
return (
t.v.equals(this.v) &&
t.axis.equals(this.axis) &&
t.theta === this.theta &&
t.inf === this.inf &&
t.sup === this.sup
);
}
}),
(s.Cone = i),
(s.Ray.prototype.intersectCone = ((e = new s.Vector3()),
function(t, s) {
var i = t.cosTheta,
o = t.axis.dot(this.direction),
n = i * i;
e.subVectors(this.origin, t.v);
var h,
r = t.axis.dot(e),
u = o * o - n,
a = o * r - n * this.direction.dot(e),
c = r * r - n * e.dot(e);
if (Math.abs(u) >= 0) {
var f = a * a - c * u;
if (f < 0) return 0;
if (f > 0) {
var p = Math.sqrt(f),
d = 1 / u,
l = 0,
y = (-a - p) * d;
return (
ray.at(y, s),
e.subVectors(s, t.v),
(h = e.dot(t.axis)) > t.inf && h < t.sup && l++,
(y = (-a + p) * d),
ray.at(y, s),
e.subVectors(s, t.v),
(h = e.dot(t.axis)) > t.inf && h < t.sup && l++,
2 == l ? s : 1 == l ? s : null
);
}
return (
(y = a / u),
ray.at(y, s),
e.subVectors(s, t.v),
(h = e.dot(t.axis)) > t.inf && h < t.sup ? s : null
);
}
return Math.abs(a) >= 0
? ((y = (0.5 * c) / a),
  ray.at(y, s),
  e.subVectors(s, t.v),
  (h = e.dot(t.axis)) > t.inf && h < t.sup ? s : null)
: null;
})),
(t.Cone = i),
Object.defineProperty(t, "__esModule", {value: !0});
});
